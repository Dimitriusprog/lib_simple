#include <Windows.h>
#include <conio.h>
#include <string>
#include <iostream>

#define b Beep(1000,50);
#define d Beep(600,300);


using namespace std;

class PseGraphic {
private:
    HANDLE hcon = GetStdHandle(STD_OUTPUT_HANDLE);
    COORD coord;

public:
    void Set(int x, int y) {
        coord.X = x;
        coord.Y = y;
        SetConsoleCursorPosition(hcon, coord);
    }

    void SetColor(int Color, int ColorB) {
        SetConsoleTextAttribute(hcon, (WORD)((ColorB << 4) | Color));
    }

};
class Panel {
private:

    string text = "";
    int x{}, y{}, x_pn{}, y_pn{}, Color{}, ColorB{};

public:
    PseGraphic* pn = new PseGraphic;
public:

    void SetCoord(int x, int y) {
        this->x = x; this->y = y;
    }
    void SetSize(int x_pn, int y_pn) {
        this->x_pn = x_pn; this->y_pn = y_pn;
    }
    void SetColor(int Color, int ColorB) {
        this->Color = Color; this->ColorB = ColorB;
    }

    void SetText(string text) {
        this->text = text;
    }


    void Draw() {
        pn->SetColor(Color, ColorB);
        for (int i{}; i < x_pn; i++) {
            pn->Set(x + i, y);
            cout << "#";
        }
        for (int i{}; i < x_pn; i++) {
            pn->Set(x + i, y + y_pn);
            cout << "#";
        }
        for (int j{}; j < y_pn; j++) {
            pn->Set(x, y + j);
            cout << "#";
        }
        for (int j{}; j <= y_pn; j++) {
            pn->Set(x + x_pn, y + j);
            cout << "#";
        }

        int y_special{ 1 }, x_special{ 1 };
        for (int i{ 0 }; i < text.length(); i++) {
            if ((x + x_special) > (x + x_pn - 2)) { y_special++; x_special = 1; }
            else { x_special++; }
            pn->Set(x + x_special, y + y_special);
            cout << text[i];
        }

        pn->Set(0, y + y_pn + 1);
        pn->SetColor(7, 0);
    }


    void Set(int x, int y, int x_pn, int y_pn, int Color, int ColorB, string text) {
        this->x = x; this->y = y; this->x_pn = x_pn; this->y_pn = y_pn; this->Color = Color; this->ColorB = ColorB, this->text = text;
        Draw();
    }

};

class Slot {
private:
    void (*funcPtr)();
public:
    bool value{ false };
    //int* funcion;
public:
    void SetFunc(void (*f)()) {
        funcPtr = f;
    }
public:
    void func() {
        (*funcPtr)();
    }


public:
    Panel* n = new Panel();

    void Active() {
        n->SetColor(2, 0);
        n->Draw();
    }

    void Deactive() {
        n->SetColor(7, 0);
        n->Draw();
    }



public:
    Slot() {

    }

    ~Slot() {

        delete n;
    }
};


class BoxPanel {
private:
    Panel* add = new Panel;

    int x_move_last{}, y_move_last{};
    int x_move{}, y_move{};

    int x_matrix{}, y_matrix{};

public:
    Slot** matrix = new Slot * [y_matrix];

    BoxPanel(int x_matrix, int y_matrix) {

        this->x_matrix = x_matrix;
        this->y_matrix = y_matrix;

        for (int i{}; i < y_matrix; i++) {
            matrix[i] = new Slot[x_matrix];
        }

    }
public:
    void Update(int y) {
        matrix[y_move_last][x_move_last].Deactive();
        matrix[y_move][x_move].Active();
        add->pn->Set(0, y);
    }


public:
    void Xpl() {
        if (x_move == (x_matrix - 1)) {}
        else {
            x_move_last = x_move; y_move_last = y_move;

            x_move++;
        }
    }

    void Xmi() {
        if (x_move == 0) {}
        else {
            x_move_last = x_move; y_move_last = y_move;
            x_move--;
        }
    }

    void Ypl() {
        if (y_move == (y_matrix - 1)) {}
        else {
            x_move_last = x_move; y_move_last = y_move;
            y_move++;
        }
    }

    void Ymi() {
        if (y_move == 0) {}
        else {
            x_move_last = x_move; y_move_last = y_move;
            y_move--;
        }

    }

    void Enter() {
        matrix[y_move][x_move].func();
    }

};
